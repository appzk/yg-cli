#!/usr/bin/env node
const program = require('commander'); // 命令行处理工具, 主要用于创建子命令和切割命令行参数并执行
const chalk = require('chalk'); // 用于高亮终端打印出的信息(命令行字体颜色)
const inquirer = require('inquirer'); // 常用的交互式命令行用户界面的集合。表现是控制台输出提问
const fs = require('fs');

const prom = require('../scripts/prompt');
const utils = require('../scripts/utils');

/**
 * Usage. 从命令中获取参数
 * program.args[0]	模板类型
 * program.args[1]	自定义项目名称
 * program.clone		clone
 * program.offline	离线
 */
// 配置commander的使用方法
// npm run dev [-c ygego -s alpha]
program
  .usage('[option]', '--channel required')
  .option('-c --channel [渠道名称]', 'channel: ygego || aode || etc.')
  .option('-s --server [测试环境]', 'server: alpha || test || beta etc.')
  .option('-x --channelserver [渠道:环境]', 'channel:server: ygego:alpha || aode:alpha || beta etc.')
  .option('-t --type [typeName]', 'type: start | debug | reload.')
  .parse(process.argv);
  
  console.log('当前正在准备启动环境...');
  const hasParams = utils.parseArg(program);
  const {type} = program;
  if(hasParams){
    envStartLocal(hasParams);
  }
  else if (type!==undefined){
    envStart(type);
  }
  else{
    console.log(chalk.green('未传入任何参数，请按提示选择'))//字体绿色
    inquirer.prompt(prom).then(function (answers) {
      // console.log(answers);
      const ansParams = utils.parseArg(answers);
      envStartLocal(ansParams);
    })
      
      
  }

/**
 * 定义commander的help方法
 */

program.on('--help', () => {
  console.log('  Examples:');
  console.log();
  console.log('  $ explorer init');
  console.log();
});

async function envStart(type){
  
  console.log(' type: %j', type);
  if (!type){
    throw new Error(chalk.red('please input  type'));
  }
  if (type==='start'){
    await utils.runStart();  
  }
  else if (type==='reload'){
    await utils.runReStart();
  }
  else{
    //TODO 是否需要debug
   console.log('');
  }
      
  
}
// TODO: 项目中有细节需跟进
async function envStartLocal(params){
  
  // ansParams.channelName,ansParams.channelServer
  utils.checkArgs(params);
  await utils.updateSettings({key:'channelName',value:params.channelName});
  console.log('finish');
  await utils.runStartLocal(params);  
  // else if (type==='reload'){
  //   await utils.runReStartLocal(params);
  // }
}



 



